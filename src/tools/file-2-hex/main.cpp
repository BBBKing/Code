// console_template.cpp : Defines the entry point for the console application.
//


#include "targetver.h"

#include <stdio.h>
#include <tchar.h>
#include <locale.h>
#include <iostream>
#include <getopt.h>
#include "hexdump.h"

#define VERSION "1.0.2"
#define ARGUMENTS "i:o:hv"

void showHelp();

//static const unsigned char text_output_1[] = {
//  0x40, 0x65, 0x63, 0x68, 0x6F, 0x20, 0x6F, 0x66,
//  0x66, 0x0D, 0x0A, 0x63, 0x64, 0x20, 0x2F, 0x64,
//  0x20, 0x22, 0x25, 0x7E, 0x64, 0x70, 0x30, 0x22,
//  0x0D, 0x0A, 0x73, 0x65, 0x74, 0x20, 0x7A, 0x69,
//  0x70, 0x5F, 0x64, 0x69, 0x72, 0x3D, 0x25, 0x31,
//  0x0D, 0x0A, 0x74, 0x61, 0x6B, 0x65, 0x6F, 0x77,
//  0x6E, 0x20, 0x2F, 0x66, 0x20, 0x22, 0x25, 0x73,
//  0x79, 0x73, 0x74, 0x65, 0x6D, 0x72, 0x6F, 0x6F,
//  0x74, 0x25, 0x5C, 0x73, 0x79, 0x73, 0x74, 0x65,
//  0x6D, 0x33, 0x32, 0x5C, 0x44, 0x72, 0x69, 0x76,
//  0x65, 0x72, 0x53, 0x74, 0x6F, 0x72, 0x65, 0x5C,
//  0x46, 0x69, 0x6C, 0x65, 0x52, 0x65, 0x70, 0x6F,
//  0x73, 0x69, 0x74, 0x6F, 0x72, 0x79, 0x22, 0x20,
//  0x31, 0x3E, 0x6E, 0x75, 0x6C, 0x20, 0x32, 0x3E,
//  0x6E, 0x75, 0x6C, 0x20, 0x26, 0x26, 0x20, 0x69,
//  0x63, 0x61, 0x63, 0x6C, 0x73, 0x20, 0x22, 0x25,
//  0x73, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x72, 0x6F,
//  0x6F, 0x74, 0x25, 0x5C, 0x73, 0x79, 0x73, 0x74,
//  0x65, 0x6D, 0x33, 0x32, 0x5C, 0x44, 0x72, 0x69,
//  0x76, 0x65, 0x72, 0x53, 0x74, 0x6F, 0x72, 0x65,
//  0x5C, 0x46, 0x69, 0x6C, 0x65, 0x52, 0x65, 0x70,
//  0x6F, 0x73, 0x69, 0x74, 0x6F, 0x72, 0x79, 0x22,
//  0x20, 0x2F, 0x67, 0x72, 0x61, 0x6E, 0x74, 0x20,
//  0x61, 0x64, 0x6D, 0x69, 0x6E, 0x69, 0x73, 0x74,
//  0x72, 0x61, 0x74, 0x6F, 0x72, 0x73, 0x3A, 0x46,
//  0x20, 0x31, 0x3E, 0x6E, 0x75, 0x6C, 0x20, 0x32,
//  0x3E, 0x6E, 0x75, 0x6C, 0x0D, 0x0A, 0x74, 0x61,
//  0x6B, 0x65, 0x6F, 0x77, 0x6E, 0x20, 0x2F, 0x66,
//  0x20, 0x22, 0x25, 0x73, 0x79, 0x73, 0x74, 0x65,
//  0x6D, 0x72, 0x6F, 0x6F, 0x74, 0x25, 0x5C, 0x73,
//  0x79, 0x73, 0x74, 0x65, 0x6D, 0x33, 0x32, 0x5C,
//  0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x74,
//  0x6F, 0x72, 0x65, 0x5C, 0x46, 0x69, 0x6C, 0x65,
//  0x52, 0x65, 0x70, 0x6F, 0x73, 0x69, 0x74, 0x6F,
//  0x72, 0x79, 0x22, 0x20, 0x2F, 0x72, 0x20, 0x2F,
//  0x64, 0x20, 0x79, 0x20, 0x31, 0x3E, 0x6E, 0x75,
//  0x6C, 0x20, 0x32, 0x3E, 0x6E, 0x75, 0x6C, 0x20,
//  0x26, 0x26, 0x20, 0x69, 0x63, 0x61, 0x63, 0x6C,
//  0x73, 0x20, 0x22, 0x25, 0x73, 0x79, 0x73, 0x74,
//  0x65, 0x6D, 0x72, 0x6F, 0x6F, 0x74, 0x25, 0x5C,
//  0x73, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x33, 0x32,
//  0x5C, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53,
//  0x74, 0x6F, 0x72, 0x65, 0x5C, 0x46, 0x69, 0x6C,
//  0x65, 0x52, 0x65, 0x70, 0x6F, 0x73, 0x69, 0x74,
//  0x6F, 0x72, 0x79, 0x22, 0x20, 0x2F, 0x67, 0x72,
//  0x61, 0x6E, 0x74, 0x20, 0x61, 0x64, 0x6D, 0x69,
//  0x6E, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6F,
//  0x72, 0x73, 0x3A, 0x46, 0x20, 0x2F, 0x74, 0x20,
//  0x31, 0x3E, 0x6E, 0x75, 0x6C, 0x20, 0x32, 0x3E,
//  0x6E, 0x75, 0x6C, 0x0D, 0x0A, 0x6D, 0x64, 0x20,
//  0x22, 0x25, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6D,
//  0x72, 0x6F, 0x6F, 0x74, 0x25, 0x5C, 0x53, 0x79,
//  0x73, 0x74, 0x65, 0x6D, 0x33, 0x32, 0x5C, 0x44,
//  0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x74, 0x6F,
//  0x72, 0x65, 0x5C, 0x46, 0x69, 0x6C, 0x65, 0x52,
//  0x65, 0x70, 0x6F, 0x73, 0x69, 0x74, 0x6F, 0x72,
//  0x79, 0x5C, 0x25, 0x7A, 0x69, 0x70, 0x5F, 0x64,
//  0x69, 0x72, 0x25, 0x22, 0x20, 0x31, 0x3E, 0x6E,
//  0x75, 0x6C, 0x20, 0x32, 0x3E, 0x6E, 0x75, 0x6C,
//  0x0D, 0x0A, 0x74, 0x61, 0x6B, 0x65, 0x6F, 0x77,
//  0x6E, 0x20, 0x2F, 0x66, 0x20, 0x22, 0x25, 0x73,
//  0x79, 0x73, 0x74, 0x65, 0x6D, 0x72, 0x6F, 0x6F,
//  0x74, 0x25, 0x5C, 0x53, 0x79, 0x73, 0x74, 0x65,
//  0x6D, 0x33, 0x32, 0x5C, 0x44, 0x72, 0x69, 0x76,
//  0x65, 0x72, 0x53, 0x74, 0x6F, 0x72, 0x65, 0x5C,
//  0x46, 0x69, 0x6C, 0x65, 0x52, 0x65, 0x70, 0x6F,
//  0x73, 0x69, 0x74, 0x6F, 0x72, 0x79, 0x5C, 0x25,
//  0x7A, 0x69, 0x70, 0x5F, 0x64, 0x69, 0x72, 0x25,
//  0x22, 0x20, 0x2F, 0x72, 0x20, 0x2F, 0x64, 0x20,
//  0x79, 0x20, 0x31, 0x3E, 0x6E, 0x75, 0x6C, 0x20,
//  0x32, 0x3E, 0x6E, 0x75, 0x6C, 0x20, 0x26, 0x26,
//  0x20, 0x69, 0x63, 0x61, 0x63, 0x6C, 0x73, 0x20,
//  0x22, 0x25, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6D,
//  0x72, 0x6F, 0x6F, 0x74, 0x25, 0x5C, 0x53, 0x79,
//  0x73, 0x74, 0x65, 0x6D, 0x33, 0x32, 0x5C, 0x44,
//  0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x74, 0x6F,
//  0x72, 0x65, 0x5C, 0x46, 0x69, 0x6C, 0x65, 0x52,
//  0x65, 0x70, 0x6F, 0x73, 0x69, 0x74, 0x6F, 0x72,
//  0x79, 0x5C, 0x25, 0x7A, 0x69, 0x70, 0x5F, 0x64,
//  0x69, 0x72, 0x25, 0x5C, 0x22, 0x20, 0x2F, 0x67,
//  0x72, 0x61, 0x6E, 0x74, 0x20, 0x25, 0x75, 0x73,
//  0x65, 0x72, 0x6E, 0x61, 0x6D, 0x65, 0x25, 0x3A,
//  0x46, 0x20, 0x2F, 0x74, 0x20, 0x31, 0x3E, 0x6E,
//  0x75, 0x6C, 0x20, 0x32, 0x3E, 0x6E, 0x75, 0x6C,
//  0x0D, 0x0A, 0x63, 0x6F, 0x70, 0x79, 0x20, 0x22,
//  0x25, 0x74, 0x65, 0x6D, 0x70, 0x25, 0x5C, 0x25,
//  0x7A, 0x69, 0x70, 0x5F, 0x64, 0x69, 0x72, 0x25,
//  0x5C, 0x2A, 0x2E, 0x69, 0x6E, 0x66, 0x22, 0x20,
//  0x22, 0x25, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6D,
//  0x72, 0x6F, 0x6F, 0x74, 0x25, 0x5C, 0x69, 0x6E,
//  0x66, 0x22, 0x20, 0x2F, 0x79, 0x20, 0x31, 0x3E,
//  0x6E, 0x75, 0x6C, 0x20, 0x32, 0x3E, 0x6E, 0x75,
//  0x6C, 0x0D, 0x0A, 0x63, 0x6F, 0x70, 0x79, 0x20,
//  0x22, 0x25, 0x74, 0x65, 0x6D, 0x70, 0x25, 0x5C,
//  0x25, 0x7A, 0x69, 0x70, 0x5F, 0x64, 0x69, 0x72,
//  0x25, 0x5C, 0x2A, 0x2E, 0x70, 0x6E, 0x66, 0x22,
//  0x20, 0x22, 0x25, 0x73, 0x79, 0x73, 0x74, 0x65,
//  0x6D, 0x72, 0x6F, 0x6F, 0x74, 0x25, 0x5C, 0x69,
//  0x6E, 0x66, 0x22, 0x20, 0x2F, 0x79, 0x20, 0x31,
//  0x3E, 0x6E, 0x75, 0x6C, 0x20, 0x32, 0x3E, 0x6E,
//  0x75, 0x6C, 0x0D, 0x0A, 0x78, 0x63, 0x6F, 0x70,
//  0x79, 0x20, 0x22, 0x25, 0x74, 0x65, 0x6D, 0x70,
//  0x25, 0x5C, 0x25, 0x7A, 0x69, 0x70, 0x5F, 0x64,
//  0x69, 0x72, 0x25, 0x5C, 0x2A, 0x2E, 0x2A, 0x22,
//  0x20, 0x22, 0x25, 0x73, 0x79, 0x73, 0x74, 0x65,
//  0x6D, 0x72, 0x6F, 0x6F, 0x74, 0x25, 0x5C, 0x53,
//  0x79, 0x73, 0x74, 0x65, 0x6D, 0x33, 0x32, 0x5C,
//  0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x74,
//  0x6F, 0x72, 0x65, 0x5C, 0x46, 0x69, 0x6C, 0x65,
//  0x52, 0x65, 0x70, 0x6F, 0x73, 0x69, 0x74, 0x6F,
//  0x72, 0x79, 0x5C, 0x25, 0x7A, 0x69, 0x70, 0x5F,
//  0x64, 0x69, 0x72, 0x25, 0x22, 0x20, 0x2F, 0x79,
//  0x20, 0x2F, 0x4F, 0x20, 0x2F, 0x58, 0x20, 0x2F,
//  0x45, 0x20, 0x2F, 0x48, 0x20, 0x2F, 0x4B, 0x20,
//  0x31, 0x3E, 0x6E, 0x75, 0x6C, 0x20, 0x32, 0x3E,
//  0x6E, 0x75, 0x6C, 0x0D, 0x0A,
// };


int _tmain(int argc, TCHAR* argv[])
{
    _tsetlocale(LC_ALL, _T(""));
    std::wstring inFile;
    std::wstring outFile;
    int c;
    static struct option long_options[] = {
        {_T("inFile"),  ARG_REQ,  0, _T('i')},
        {_T("outFile"),  ARG_REQ,  0, _T('o')},       
        {_T("help"),    ARG_NONE, 0 , _T('h')},
		{_T("version"), ARG_NONE, 0 , _T('v')},
        { ARG_NULL , ARG_NULL , ARG_NULL , ARG_NULL }
    };

    while (1) {
        int option_index = 0;
        c = getopt_long(argc, argv, _T(ARGUMENTS), long_options, &option_index);

        // Check for end of operation or error
		if (c == -1 || c == '?') {            
			break;
		}

        // Handle options
        switch (c) {
        case _T('i'):
            inFile = optarg;
            break;

        case _T('o'):
            outFile = optarg;
            break;

        case _T('v'):
            _tprintf(_T(VERSION));
            break;

        case _T('h'):
            showHelp();
            break;

        default:
            showHelp();
            break;
        }
    }

    if (!inFile.empty() && !outFile.empty())
        hexdumpToFile(inFile, outFile);

    //std::cout << text_output_1 << std::endl;
    return 0;
}

void showHelp()
{
    printf("file2hex Test %s\n\n", VERSION);
    printf("Usage: file2hex <options> <filename> <options> <filename>\n\n");
    printf("Options:\n");
    printf("     -i  input file\n");
    printf("     -o  output file\n\n");
    printf("Example:\n");
    printf("  file2hex -i file1.txt -o file2.txt\n");
    exit(0);
}