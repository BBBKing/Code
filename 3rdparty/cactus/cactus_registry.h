/*!
* \file cactus_registry.h
* \brief 注册表类
*
* 注册表类声明，继承自ATL::CRegKey
*
* \author wangyang
* \date 2015/01/30
* \version 1.0
*/

#ifndef __CACTUS_REGISTRY_H__
#define __CACTUS_REGISTRY_H__

#include <cactus/cactus.h>
#include <cactus/cactus_types.h>
#include <atlbase.h>

namespace cactus
{
tstring CACTUS_API GetRegisteredExePath(LPCTSTR ptszExeName);
}

namespace cactus
{
class CACTUS_API CRegKey : public ATL::CRegKey
{
public:
    CRegKey() {};
    virtual ~CRegKey() {};

public:
    LONG ReadDefaultStringValue(string16& data);

    LONG ReadStringValue(const string16& name, string16& data);

    LONG ReadDWORDValue(const string16& name, DWORD& data);

    LONG ReadBinaryValue(const string16& name, BYTE* data, DWORD& length);

    LONG ReadBinaryValue(const string16& name, std::vector<BYTE>& buf);

    LONG ReadMultiStringValue(const string16& name, std::vector<string16>& valuelist);

    LONG WriteDWORDValue(const string16& name, const DWORD data);

    LONG WriteStringValue(const string16& name, const string16& data);

    LONG WriteBinaryValue(const string16& name, BYTE* data, DWORD length);

    LONG DeleteValue(const string16& name);

    LONG DeleteSubKey(const string16& key);

    BOOL HasValues() const;

    LONG Open(HKEY hkey, const string16& key);

    LONG Open(const string16& key, bool readOnly = false, REGSAM extraSam = 0);

public:
    static LONG get_subkey_names(HKEY hkey, const string16& key, std::vector<string16>& list);
    static LONG get_subkey_names(const string16& fullkey, std::vector<string16>& list);

    static LONG get_value_names(HKEY hkey, const string16& key, std::vector<string16>& list);
    static LONG get_value_names(const string16& fullkey, std::vector<string16>& list);

    static LONG DeleteKey(HKEY hkey, const string16& key);

    static LONG ReadDWORDValue(HKEY hkey, const string16& key, const string16& name, DWORD& data);

    static LONG ReadStringValue(HKEY hkey, const string16& key, const string16& name, string16& data);

    static LONG ReadMultiStringValue(HKEY hkey, const string16& key, const string16& name, string16& data);

    static LONG ReadMultiStringValue(HKEY hkey, const string16& key, const string16& name, std::vector<string16>& valuelist);

    static BOOL ReadRegMString(HKEY hkey, const string16& key, const string16& name, CSimpleArray<string16>& ms);

    static BOOL WriteRegMString(HKEY hkey, const string16& key, const string16& name, const CSimpleArray<string16> &ms);

    static LONG WriteStringValue(HKEY hkey, const string16& key, const string16& name, const string16& data);

    static LONG WriteDWORDValue(HKEY hkey, const string16& key, const string16& name, const DWORD data);

    static BOOL HasValues(HKEY hkey, const string16& key);

    static BOOL CopyRegistryKey(HKEY hkRootFrom, const string16& strFromPath, HKEY hkRootTo, const string16& strToPath);

    static void ExportRegistry(const string16& key, const string16& name, const string16& filename);

    //使用ShellExecute方式导入导出注册表项
    static void ShellExportRegister(const string16& export_str, const string16& filename);
    static void ShellImportRegister(const string16& filename);
protected:
    static HKEY handleFor(const string16& rootKey);
    static BOOL _split_key(const string16& fullkey, HKEY& hkey, string16& subkey);

private:
    static BOOL _CopyKeys(HKEY hkFrom, HKEY hkTo);

    static BOOL _CopyValues(HKEY hkFrom, HKEY hkTo);

    static void _EnumerateValues(HKEY hkey, const string16& key, FILE *fp, const string16& fullpath);

    static void _EnumerateKey(HKEY hkey, const string16& key, FILE *fp, const string16& fullpath);

    static BOOL _IsSubKey(HKEY hkey, const string16& key);

    static BOOL _IsExist(HKEY hkey, const string16& key);

    //To format the data with datatype as in .EXP file generated by REGEDIT....
    static void _FormatDataWithDataType(DWORD dwKeyType, LPBYTE pbbinKeyData, DWORD dwKeyDataLength, string16& output);



};
} // namespace cactus




#endif // __CACTUS_REGISTRY_H__
